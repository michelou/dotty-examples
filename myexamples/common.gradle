// overrides default "build"
buildDir file("target")

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

project.ext {
    mainSourceTree = fileTree(dir: "src/main/scala", include: "**/*.scala")
    testSourceTree = fileTree(dir: "src/test/scala", include: "**/*.scala")

    classesDir = file("${buildDir}/classes")
    testClassesDir = file("${buildDir}/test-classes")

    if (dottyLocal?.toBoolean()) {
        scala3Home = System.getenv("SCALA3_HOME")
		scalaHome = scala3Home != null ? scala3Home : System.getenv("SCALA_HOME")
        print("scalaHome=$scalaHome")

        dottyLibraryPath = file(scalaHome + "/lib")
        dottyLibraryFiles = files { dottyLibraryPath.listFiles() }
        dotcLibraryFiles = dottyLibraryFiles.filter { File f ->
            f.name.matches("compiler-interface(.*)jar") ||
            f.name.matches("scala-(.*)jar") ||
            f.name.matches("scala3-(.*)jar") ||
            f.name.matches("tasty-core(.*)jar")
        }
        buildClasspath = files(dotcLibraryFiles, sourceSets.main.output, classesDir)
    } else {
        buildClasspath = files(sourceSets.main.runtimeClasspath, classesDir)
    }
    userProfile = System.getenv("USERPROFILE")
    userHome = userProfile != null ? userProfile.replaceAll("\\\\", "/") : System.getenv("HOME")
    testLibsTree = fileTree(dir: "${userHome}/.m2/repository", include: "**/junit-4.13.2.jar")
    testClasspath = files(buildClasspath, testLibsTree, testClassesDir)
}

sourceSets {
    main {
        java {
            buildDir classesDir
        }
    }
}

clean.doLast {
    buildDir.deleteDir()
}

tasks.withType(JavaCompile) {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html
    options.deprecation true
    options.encoding "UTF8"
}

task compileScala(type: JavaExec) {
    dependsOn compileJava

    description "Compile Scala source files"

    classpath buildClasspath

    jvmArgs "-Dscala.usejavacp=true"

    main "dotty.tools.dotc.Main"

    String sources = mainSourceTree.files.join("\" \"").replaceAll("\\\\", "/")
    args "-deprecation", "-encoding", "UTF8", "-d", classesDir, sources
}

compileScala.doFirst {
    if (!classesDir.exists()) classesDir.mkdirs()
}

build {
    dependsOn compileScala
}

task run(type: JavaExec) {
    dependsOn build

    description "Execute Scala main class $mainClassName"

    classpath buildClasspath

    jvmArgs "-Xms1024m", "-Xss2m", "-Dfile.encoding=UTF-8"

    // systemProperty "message" "Hello"

    if (mainClassName?.trim()) main mainClassName
    else main "Main"
    if (args == null) args ""
}

task compileTest(type: JavaExec) {
    dependsOn compileScala

    description "Compile Scala test source files"

    classpath testClasspath

    jvmArgs "-Dscala.usejavacp=true"

    main "dotty.tools.dotc.Main"

    String sources = testSourceTree.files.join("\" \"").replaceAll("\\\\", "/")
    args "-deprecation", "-encoding", "UTF8", "-d", testClassesDir, sources
}

compileTest.doFirst {
    if (!testClassesDir.exists()) testClassesDir.mkdirs()
}

test {
    dependsOn compileTest
    println "test (NYI)"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.scala-lang:scala3-compiler_3:3.1.1"
    testImplementation "junit:junit:4.13.2"
	testImplementation "org.scalatest:scalatest_3:3.2.10"
	implementation "org.scalatest:scalatest-funspec_3:3.2.10"
	implementation "org.scalatest:scalatest-funsuite_3:3.2.10"
	implementation "org.specs2:specs2-common_2.13:4.13.1"
	implementation "org.specs2:specs2-core_2.13:4.13.1"
	implementation "org.specs2:specs2-junit_2.13:4.13.1"
}
