// overrides default "/build"
buildDir file("/target")

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

ext {
    scalaSourceTree = fileTree(dir: "/src/main/scala", include: "**/*.scala")
    projectJars = fileTree(dir: "/lib", include: "**/*.jar")
    classesDir = file("${buildDir}/classes")

    if (dottyLocal?.toBoolean()) {
        dottyHome = System.getenv("DOTTY_HOME")
        print("DOTTY_HOME=$dottyHome")

        dottyLibraryPath = file(dottyHome + "/lib")
        dottyLibraryFiles = files { dottyLibraryPath.listFiles() }
        dotcLibraryFiles = dottyLibraryFiles.filter { File f ->
            f.name.matches("scala-library(.*)jar") ||
            f.name.matches("scala-asm(.*)jar") ||
            f.name.matches("compiler-interface(.*)jar") ||
            f.name.matches("dotty-interfaces(.*)jar") ||
            f.name.matches("dotty-library(.*)jar") ||
            f.name.matches("dotty-compiler(.*)jar") ||
            f.name.matches("tasty-core(.*)jar") ||
            f.name.matches("dotty-staging(.*)jar")
        }
        scalaClasspath = files(dotcLibraryFiles, projectJars, sourceSets.main.output, classesDir)
    } else {
        scalaClasspath = files(sourceSets.main.runtimeClasspath, projectJars, classesDir)
    }
}

sourceSets {
    main {
        java {
            buildDir classesDir
        }
    }
}

clean.doLast {
    buildDir.deleteDir()
}

tasks.withType(JavaCompile) {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html
    options.deprecation true
	options.encoding "UTF8"
}

task compileScala(type: JavaExec) {
    dependsOn compileJava

    description "Compile Scala source files"

    classpath sourceSets.main.runtimeClasspath
    String sources = scalaSourceTree.files.join("\" \"").replaceAll("\\\\", "/")

    main "dotty.tools.dotc.Main"

    jvmArgs "-Dscala.usejavacp=true"

    args "-deprecation", "-encoding", "UTF8", "-d", classesDir, sources
}

compileScala.doFirst {
    if (!classesDir.exists()) classesDir.mkdirs()
}

build {
    dependsOn compileScala
}

task run(type: JavaExec) {
    dependsOn build

    description "Execute Scala main class $mainClassName"

    classpath scalaClasspath

    jvmArgs "-Xms1024m", "-Xss2m"

    // systemProperty "message" "Hello"

    if (mainClassName?.trim()) main mainClassName
    else main "Main"
    if (args == null) args ""
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "ch.epfl.lamp:dotty-compiler_0.24:0.24.0-RC1"
    testImplementation "junit:junit:4.13"
}
